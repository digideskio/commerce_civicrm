<?php

/**
 * @file
 * Integrates Drupal Commerce with CiviCRM.
 * Based largely on uc_civicrm, so thanks to dharmatech and AJA for their work
 * there.
 */

/**
 * @TODO Known bugs while working on #1975106.
 *
 * - Duplicate Billing address creation for each new order.
 *
 * - Matches existing contacts with empty email addresses and
 *   overwrites. Since this happens for every presave, even before the
 *   email can be provided, it happens for every anonymous purchase.
 *
 * - Runs repeatedly for every order change, resulting in 4x
 *   processing for a single order flow.
 *
 * - Does not account for domains, so mismatches contacts if Commerce
 *   is running on a secondary domain.
 *
 * - Tries to create Drupal Commerce Purchases group and fields every time?
 *
 * - Not sure what to make of "Cannot change contribution status from
 *   In Progress to Completed". Think we're getting bad input to a
 *   validation function.
 *
 *    Notice: Undefined variable: itemStatus in
 *    CRM_Financial_BAO_FinancialItem::add() (line 96 of
 *    /var/www/australianbreastfeeding/www.mothersdirect.com.au/sites/mothersdirect.com.au/modules/civicrm/CRM/Financial/BAO/FinancialItem.php).
 *
 *    Notice: Undefined index: In Progress in
 *    CRM_Contribute_BAO_Contribution::checkStatusValidation() (line
 *    2852 of
 *    /var/www/australianbreastfeeding/www.mothersdirect.com.au/sites/mothersdirect.com.au/modules/civicrm/CRM/Contribute/BAO/Contribution.php).
 *
 *    Warning: in_array() expects parameter 2 to be array, null given
 *    in CRM_Contribute_BAO_Contribution::checkStatusValidation()
 *    (line 2852 of
 *    /var/www/australianbreastfeeding/www.mothersdirect.com.au/sites/mothersdirect.com.au/modules/civicrm/CRM/Contribute/BAO/Contribution.php).
 *
 *    CiviCRM API error in
 *    /var/www/australianbreastfeeding/www.mothersdirect.com.au/sites/mothersdirect.com.au/modules/civicrm/api/api.php
 *    @ 272: Cannot change contribution status from In Progress to
 *    Completed.
 *
 */

/**
 * Implements hook_help().
 */
function commerce_civicrm_help($path = 'admin/help#commerce_civicrm') {
  switch ($path) {
    case 'admin/help#commerce_civicrm':
      return t('This module integrates Drupal Commerce with CiviCRM. When a customer purchases something from the online store, their billing name and address information is added to CiviCRM, while existing contact records are updated.  If the commerce_shipping module is used, their shipping name and address is also recorded in CiviCRM as their "Home" address.  The contact is added to a group and an activity record of type "Purchase" is added to their history.');
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_civicrm_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_civicrm'),
  );
}

/**
 * Implements hook_civicrm_tabs().
 */
function commerce_civicrm_civicrm_tabs(&$tabs, $cid) {
  if (!civicrm_initialize()) {
    return;
  }

  $uid = CRM_Core_BAO_UFMatch::getUFId($cid);
  if (empty($uid)) {
    return;
  }

  $customer = user_load($uid);
  $count = commerce_civicrm_display_contact_transactions($customer, TRUE);

  $tab = array(
    'id'     => 'purchases',
    'title'  => t('Purchases'),
    'count'  => $count,
    'weight' => 99,
  );

  if ($count > 0) {
    $tab['url'] = url('admin/commerce/civicrm/customer/orders/' . $uid);
  }
  $tabs[] = $tab;
}

/**
 * Implements hook_menu().
 */
function commerce_civicrm_menu() {
  $items['admin/commerce/civicrm/customer/orders/%user'] = array(
    'title'            => 'CiviCRM',
    'page callback'    => 'commerce_civicrm_display_contact_transactions',
    'page arguments'   => array(5),
    'access arguments' => array('administer CiviCRM'),
    'type'             => MENU_CALLBACK,
  );
  $items['admin/commerce/config/civicrm'] = array(
    'title' => 'CiviCRM',
    'description' => 'Configure Drupal Commerce and CiviCRM integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_civicrm_admin'),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_civicrm_links().
 *
 * Add a 'create order' link to the actions dropdown on a CiviCRM contact screen.
 *
 * @param $op
 * @param $objectName
 * @param $objectId
 * @return array
 */
function commerce_civicrm_civicrm_links($op, $objectName, $objectId) {
  civicrm_initialize();
  global $base_url;
  $links = array();
  $uid = '';
  $cid = $_GET['cid'];
  if ($cid && is_numeric($cid)) {
    // Get the Drupal uid for the CiviCRM contact if there is a match
    $params = array('contact_id' => $cid, 'version' => 3);
    $uf_match = civicrm_api3('uf_match', 'get', $params);
    if (!empty($uf_match['id']) && count($uf_match['values'] == 1)) {
      $uid = $uf_match['id'];
    }
    switch ($objectName) {
      case 'Contact':
        $links[] = array(
          'title' => t('Add new Drupal Commerce order for this contact'),
          'url' => $base_url.'/admin/commerce/orders/add/'.$uid .'?cid='. $cid,
          'weight' => 10,
        );
        break;
    }
  }
  return $links;
}

/**
 * Implements of hook_form_FORMID_alter().
 *
 * @param $form
 * @param $form_state
 */
function commerce_civicrm_form_commerce_order_ui_order_form_alter(&$form, &$form_state) {
  if (!isset($form_state['commerce_order']->order_id) && !empty($_GET['cid']) && is_numeric($_GET['cid'])) {
    commerce_civicrm_prefill_order_form_with_civi_data($form, $form_state, $_GET['cid']);
  }
}

/**
  * Implements hook_commerce_customer_profile_type_info().
  */
function commerce_civicrm_commerce_customer_profile_type_info() {
  $profile_types = array();

  $profile_types['civicrm'] = array(
    'type' => 'civicrm',
    'name' => t('CiviCRM'),
    'description' => t('The profile used to associate a Commerce Order with a CiviCRM contact'),
    'help' => '',
    'addressfield' => FALSE,
  );

  return $profile_types;
}


/**
 * Update CiviCRM contact when order is updated.
 *
 * @param $order
 *   The order object to be saved.
 *
 * @see rules_invoke_all()
 */
function commerce_civicrm_commerce_order_presave($order) {
  watchdog('commerce_civicrm', 'Order: <pre>!order</pre>', array('!order' => var_export($order,1)), WATCHDOG_DEBUG);
//  $bt = debug_backtrace();
//  watchdog('commerce_civicrm', 'Backtrace: <pre>!bt</pre>', array('!bt' => print_r($bt,1)), WATCHDOG_DEBUG);
  // Only update when a new order revision is being saved.
  if (isset($order->old_revision_id)) {
    // Update the contact if we have one.
    if ($cid = _commerce_civicrm_get_cid($order)) {
      _commerce_civicrm_update_contact($cid, $order);
    }
  }
}

/**
 * Prefill a commerce order form with address data from a CiviCRM Contact.
 *
 * @param $form
 * @param $form_state
 * @param $cid
 *   CiviCRM contact id
 */
function commerce_civicrm_prefill_order_form_with_civi_data(&$form, &$form_state, $cid) {
  civicrm_initialize();

  // Save the CiviCRM contact id onto the order.
  $form_state['commerce_order']->data['cid'] = $cid;

  // Get the CiviCRM Contact object.
  $params = array(
    'id' => $cid,
  );
  $result = civicrm_api3('contact', 'get', $params);
  $contact = $result['values'][$cid];

  // Set the order primary mail to the contacts email
  $form_state['commerce_order']->mail = $contact['email'];

  // Get the shipping_profile and shipping_address so we can work with them easier.
  $shipping_profile = $form['commerce_customer_shipping']['und']['profiles'][0];
  $shipping_address = $shipping_profile['commerce_customer_address']['und'][0];
  // TODO make email field configurable - relies on field being 'field_email' currently.
  $shipping_profile['field_email']['und'][0]['email']['#default_value'] = $contact['email'];
  // TODO make phone field configurable - relies on field being 'field_phone' currently.
  $shipping_profile['field_phone']['und'][0]['phone']['#default_value'] = $contact['phone'];
  $shipping_address['street_block']['thoroughfare']['#value'] = $contact['street_address'];
  $shipping_address['street_block']['premise']['#value'] = $contact['supplemental_address_1'];
  $shipping_address['locality_block']['postal_code']['#value'] = $contact['postal_code'];
  $shipping_address['locality_block']['administrative_area']['#value'] = $contact['state_province_name'];
  $shipping_address['locality_block']['locality']['#value'] = $contact['city'];
  $shipping_address['name_block']['name_line']['#value'] = $contact['display_name'];
  // Add shipping_profile and shipping_address back into the form.
  $shipping_profile['commerce_customer_address']['und'][0] = $shipping_address;
  $form['commerce_customer_shipping']['und']['profiles'][0] = $shipping_profile;

  // Get the billing_profile and billing_address so we can work with them easier.
  $billing_profile = $form['commerce_customer_billing']['und']['profiles'][0];
  $billing_address = $billing_profile['commerce_customer_address']['und'][0];
  // TODO make email field configurable - relies on field being 'field_email' currently.
  $billing_profile['field_email']['und'][0]['email']['#default_value'] = $contact['email'];
  // TODO make phone field configurable - relies on field being 'field_phone' currently.
  $billing_profile['field_phone']['und'][0]['value']['#default_value'] = $contact['phone'];
  $billing_address['street_block']['thoroughfare']['#value'] = $contact['street_address'];
  $billing_address['street_block']['premise']['#value'] = $contact['supplemental_address_1'];
  $billing_address['locality_block']['postal_code']['#value'] = $contact['postal_code'];
  $billing_address['locality_block']['administrative_area']['#value'] = $contact['state_province_name'];
  $billing_address['locality_block']['locality']['#value'] = $contact['city'];
  $billing_address['name_block']['name_line']['#value'] = $contact['display_name'];
  // Add billing_profile and billing_address back into the form.
  $billing_profile['commerce_customer_address']['und'][0] = $billing_address;
  $form['commerce_customer_billing']['und']['profiles'][0] = $billing_profile;
}

/**
 * Display order information in a CiviCRM tab.
 *
 * @param $customer
 *   Drupal user object for the customer
 * @param $count
 *   If true, just return the number of purchases.
 */
function commerce_civicrm_display_contact_transactions($customer, $count = FALSE) {
  if (!civicrm_initialize()) {
    return;
  }

  if ($count) {
    return _commerce_civicrm_count_customer_orders($customer);
  }

  $view = views_get_view('commerce_civicrm_orders_by_user');
  $output =  $view->execute_display('default', array($customer->uid));
  print render($output);

  return;
}

/**
 * Admin form configuration.
 */
function commerce_civicrm_admin() {
  civicrm_initialize();
  _commerce_civicrm_create_custom_contribution_fields();
  if (!civicrm_initialize()) {
    return;
  }
  require_once 'CRM/Core/Config.php';

  $options = array();
  try {
    // Get groups.
    $params = array();
    $result = civicrm_api3('Group', 'get', $params);
    if ($result['values']) {
      foreach ($result['values'] as $group) {
        $options[$group['id']] = $group['title'];
      }
    }

    // Get contribution types.
    $sql = 'SELECT id, name FROM civicrm_financial_type';
    $dao =& CRM_Core_DAO::executeQuery($sql, array());
    $types = array(0 => t('Select a type...'));
    while ($dao->fetch()) {
      $types[$dao->id] = $dao->name;
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine())), 'error');
    watchdog('commerce_civicrm', 'CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine()), WATCHDOG_ERROR);
    dpm($e->getTrace(), 'trace');
  }
  natsort($types);

  $form = array();
  $form['commerce_civicrm_contribution_type'] = array(
    '#type' => 'select',
    '#title' => t('Contribution type'),
    '#default_value' => variable_get('commerce_civicrm_contribution_type', array()),
    '#options' => $types,
    '#description' => t('Select a contribution type for purchases, making a new type with a name like "Drupal purchase" is recommended.'),
  );

  $form['commerce_civicrm_groups'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Groups to add purchasers to'),
    '#default_value' => variable_get('commerce_civicrm_groups', array()),
    '#options' => $options,
  );

  return system_settings_form($form);
}

/**
 * Called when the an order is created or changed. Creates a new order or
 * updates an existing one.
 *
 * @param $order
 *   the order
 */
function commerce_civicrm_action_order_civicrm($order) {
  $billing_address = array();
  if ($wrapper = entity_metadata_wrapper('commerce_order', $order)) {
    if (isset($wrapper->commerce_customer_billing->commerce_customer_address)) {
      if ($billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value()) {
        //dpm($billing_address, 'Got billing address.');
      }
      else {
        // This happens when the order is in its early stages. We may
        // want to exit here in order to avoid vaping legit contact
        // details in favour of yet-unset billing address details?
        drupal_set_message('Billing address not yet available.', 'error');
      }
    }
    else {
      //dpm('$wrapper->commerce_customer_billing->commerce_customer_address not set.');
    }
  }
  else {
    //dpm('Order wrapper could not be retrieved.');
  }

  if (!civicrm_initialize()) {
    return;
  }

  $profile = FALSE;

  // Load the CiviCRM Profile
  if (!empty($order->commerce_customer_civicrm)) {
    //dpm('Loading CiviCRM Profile.');
    $profile_id = $order->commerce_customer_civicrm[LANGUAGE_NONE][0]['profile_id'];
    $profile = commerce_customer_profile_load($profile_id);
  }

  try {
    // Get the CID if it's been set.
    if (!empty($profile->contact)) {
      //dpm('Getting CID if set.');
      $cid = $profile->contact[LANGUAGE_NONE][0]['contact_id'];

      // Get the Contact
      $params = array('version' => 3, 'id' => $cid);
      $result = civicrm_api3('Contact', 'get', $params);

      // If the contact has an email
      // Update the order with the email
      if (!empty($result['id']) && !empty($result['values'][$result['id']])) {
        //dpm('Found contact, updating order email.');
        $contact = $result['values'][$result['id']];
        if (!empty($contact['email'])) {
          //dpm('Contact email is not empty.');
          if ($order->mail != $contact['email']) {
            //dpm('Contact email != order email.');
            $order->mail = $contact['email'];

            // Update the DB directly to stop recursion of this
            // function.
            $query = db_update('commerce_order');
            $query->fields(array(
                'mail' => $order->mail,
              ));
            $query->condition('order_id', $order->order_id);
            $query->execute();

            // Also update the current revision
            $query = db_update('commerce_order_revision');
            $query->fields(array(
                'mail' => $order->mail,
              ));
            $query->condition('order_id', $order->order_id);
            $query->condition('revision_id', $order->revision_id);
            $query->execute();
          }
        }
      }
    }

    // Find or create a CiviCRM contact ID for the customer.
    if (empty($cid)) {
      $cid = _commerce_civicrm_get_cid($order);
      //dpm(t('CID was empty, got cid %cid.', array('%cid' => $cid)));
    }

    // If cid is still empty but we have a mail, create a contact.
    if (empty($cid) && !empty($order->mail)) {
      //dpm('CID is still empty, creating a contact.');
      $params = array(
        'version' => 3,
        'contact_type' => 'Individual',
      );
      $params['email'] = $order->mail;
      $result = civicrm_api3('contact', 'create', $params);
      $cid = $result['id'];
    }

    // If the CID and the email is STILL empty, nothing to do.
    if (empty($cid) && empty($order->mail)) {
      //dpm('Exiting because no CID or email.');
      return;
    }

    // If the contact is not pre-existing, update the contact.
    if (!empty($cid) && empty($profile->contact[LANGUAGE_NONE])) {
      //dpm('Updating order.');
      _commerce_civicrm_update_contact($cid, $order);
    }

    // If a contact was created, add it to the profile
    if (!empty($profile) && empty($profile->contact[LANGUAGE_NONE]) && !empty($cid)) {
      //dpm('Contact was created, adding to profile.');
      $profile->contact[LANGUAGE_NONE][0]['contact_id'] = $cid;
      commerce_customer_profile_save($profile);
    }

    // Add the contribution record.
    _commerce_civicrm_add_contribution($cid, $order);

    // Add this contact to selected groups.
    _commerce_civicrm_add_to_groups($cid);
  }
  catch (Exception $e) {
    drupal_set_message(t('CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine())), 'error');
    watchdog('commerce_civicrm', 'CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine()), WATCHDOG_ERROR);
    dpm($e->getTrace(), 'trace');
  }
}

/**
 * Add contact to any specified groups.
 *
 * @param $cid
 *   CRM_Contact_BAO_Group object describing the contact to add
 */
function _commerce_civicrm_add_to_groups($cid) {
  $groups = variable_get('commerce_civicrm_groups', '');
  if (empty($groups)) {
    return;
  }

  try {
    foreach ($groups as $id => $key) {
      if ($key != 0) {
        $params = array(
          'contact_id' => $cid,
          'group_id' => $key
        );
        $result = civicrm_api3('GroupContact', 'create', $params);
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine())), 'error');
    watchdog('commerce_civicrm', 'CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine()), WATCHDOG_ERROR);
    dpm($e->getTrace(), 'trace');
  }
}

/**
 * Get contact id for the customer.
 *
 * @param $order
 *   Order
 * @return
 *   false|integer false   => an error occured
 *                 integer => CID if non-zero; must create if zero
 */
function _commerce_civicrm_get_cid($order) {
  if (!civicrm_initialize()) {
    return;
  }

  // Order created from CiviCRM
  if (isset($order->data['cid'])) {
    return $order->data['cid'];
  }

  try {
    // Logged in user.
    if ($order->uid) {
      $params = array(
        'uf_id' => $order->uid,
      );
      //dpm($params, 'uf_id params');
      $result = civicrm_api3('UFMatch', 'get', $params);
      if (!empty($result['values'])) {
        $match = reset($result['values']);
        //dpm($match['contact_id'], 'uf_id');
        return $match['contact_id'];
      }
    }

    // Anonymous user. If we have an email, look in the CiviCRM
    // contacts table for a contact that matches the primary email.
    if (isset($order->mail) && !empty($order->mail)) {
      $params = array(
        'email' => $order->mail,
        'return.contact_id' => TRUE
      );
      $result = civicrm_api3('Contact', 'get', $params);
      if (!empty($result['values'])) {
        $match = reset($result['values']);
        return $match['contact_id'];
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine())), 'error');
    watchdog('commerce_civicrm', 'CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine()), WATCHDOG_ERROR);
    dpm($e->getTrace(), 'trace');
  }
  return FALSE;
}

/**
 *  Add or update contact information.
 * @params $cid int CiviCRM contact id
 * @params $order Drupal order object
 */
function _commerce_civicrm_update_contact($cid, $order) {
  try {
    if (!civicrm_initialize()) {
      return;
    }

    if (!$cid) {
      throw(new ErrorException('Contact id required to update contact.'));
    }

    // Get the contact object from the contact id
    $params = array(
      'id' => $cid,
    );
    $result = civicrm_api3('contact', 'get', $params);
    $contact = $result['values'][$result['id']];

    // Get customer profile information.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $billing_profile = $order_wrapper->commerce_customer_billing->value();
    $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
    $billing_address = $billing_profile_wrapper->commerce_customer_address->value();

    // If we have a full name field, split it.
    if (!empty($billing_address['name_line'])) {
      $contact['display_name'] = $billing_address['name_line'];
      // Assumes user only has one first name and one surname... not ideal.
      $names = preg_split('/\s+/', $billing_address['name_line'], 2);
      $first_name = $names[0];
      $last_name = !empty($names[1]) ? $names[1] : '';
    }
    // Otherwise just pull out the first and last names.
    else {
      $first_name = $billing_address['first_name'];
      $last_name = $billing_address['last_name'];
      $contact['display_name'] = $first_name .' '. $last_name;
    }

    // Prepare array to update contact via Civi API.
    $contact['last_name'] = $last_name;
    $contact['first_name'] = $first_name;
    $contact['sort_name'] = "{$last_name}, {$first_name}";
    $contact['display_name'] = $billing_address['first_name'] . ' ' . $billing_address['last_name'];
    $contact['email'] = $order->mail;
    if (empty($contact['source'])) {
      $contact['source'] = 'Drupal Commerce purchase';
    }

    // Update the contact object
    $result = civicrm_api3('contact', 'create', $contact);

    // Get location type. This could be configurable, but for now we'll
    // presume 'Billing'.
    $params = array(
      'name' => 'Billing',
    );
    $result = civicrm_api3('LocationType', 'get', $params);
    if (!empty($result['values'])) {
      $location_type = reset($result['values']);
      $location_type_id = $location_type['id'];
    }

    // Billing location.
    $params = array(
      'contact_id'               => $cid,
      'location_type_id'         => $location_type_id,
      'is_primary'               => TRUE,
      'city'                     => $billing_address['locality'],
      'state_province'           => $billing_address['administrative_area'],
      'postal_code'              => $billing_address['postal_code'],
      'street_address'           => $billing_address['thoroughfare'],
      'supplemental_address_1'   => $billing_address['premise'],
      'country'                  => $billing_address['country'],
    );
    civicrm_api3('Address', 'create', $params);

    // TODO Phone @see hook_commerce_civicrm_params() for example.

    // Allow other modules to alter the data before being sent to CiviCRM.
    foreach (module_implements('commerce_civicrm_params') as $module) {
      $function = $module . '_commerce_civicrm_params';
      $function($params, $order, $cid);
    }

    // Check if we have shipping information.
    if (!empty($order_wrapper->commerce_customer_shipping)) {
      $shipping_profile = $order_wrapper->commerce_customer_shipping->value();
      $shipping_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile);
      $shipping_address = $shipping_profile_wrapper->commerce_customer_address->value();

      // Get location type. This could be configurable, but for now we'll
      // presume 'Home'.
      $params = array(
        'name' => 'Home',
      );
      $result = civicrm_api3('LocationType', 'get', $params);
      if (!empty($result['values'])) {
        $location_type = reset($result['values']);
        $location_type_id = $location_type['id'];
      }

      // Shipping location.
      $params = array(
        'contact_id'             => $cid,
        'location_type_id'       => $location_type_id,
        'location_type'          => 'Home',
        'is_primary'             => TRUE,
        'city'                   => $shipping_address['locality'],
        'state_province'         => $shipping_address['administrative_area'],
        'postal_code'            => $shipping_address['postal_code'],
        'street_address'         => $shipping_address['thoroughfare'],
        'supplemental_address_1' => $shipping_address['premise'],
        'country'                => $shipping_address['country'],
      );
      civicrm_api3('Address', 'create', $params);
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine())), 'error');
    watchdog('commerce_civicrm', 'CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine()), WATCHDOG_ERROR);
    dpm($e->getTrace(), 'trace');
  }
}


/**
 * Creates required contribution fields if they have not already been
 * created.
 */
function _commerce_civicrm_create_custom_contribution_fields() {
  $group_id = variable_get('commerce_civicrm_contribution_group_id', FALSE);
  if ($group_id != FALSE) {
    return;
  }

  try {
    // First we need to check if the Sales Tax and Shipping custom fields have
    // already been created.
    $params = array(
      'title'            => 'Drupal Commerce Purchases',
      'name'             => 'commerce_purchases',
      'extends'          => array('Contribution'),
      'weight'           => 1,
      'collapse_display' => 0,
      'is_active'        => 1,
    );
    $result = civicrm_api3('CustomGroup', 'create', $params);
    if (!empty($result['values'])) {
      $custom_group = reset($result['values']);
      variable_set('commerce_civicrm_contribution_group_id', $custom_group['id']);

      $params = array(
        'custom_group_id' => $custom_group['id'],
        'label'           => 'Sales Tax',
        'html_type'       => 'Text',
        'data_type'       => 'String',
        'weight'          => 1,
        'is_required'     => 0,
        'is_searchable'   => 0,
        'is_active'       => 1,
      );
      $result = civicrm_api3('CustomField', 'create', $params);
      if (!empty($result['values'])) {
        $tax_field = reset($result['values']);
        variable_set('commerce_civicrm_tax_field_id', $tax_field['id']);
      }

      $params = array(
        'custom_group_id' => $custom_group['id'],
        'label'           => 'Shipping Cost',
        'html_type'       => 'Text',
        'data_type'       => 'String',
        'weight'          => 2,
        'is_required'     => 0,
        'is_searchable'   => 0,
        'is_active'       => 1,
      );
      $result = civicrm_api3('CustomField', 'create', $params);
      if (!empty($result['values'])) {
        $shipping_field = reset($result['values']);
        variable_set('commerce_civicrm_shipping_field_id', $shipping_field['id']);
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine())), 'error');
    watchdog('commerce_civicrm', 'CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine()), WATCHDOG_ERROR);
    dpm($e->getTrace(), 'trace');
  }
}

/**
 * Add a contribution record.
 *
 * Create any custom fields and get the transaction id. If it doesn't exist,
 * make one up and add the contribution.
 */
function _commerce_civicrm_add_contribution($cid, &$order) {
  civicrm_initialize();
  _commerce_civicrm_create_custom_contribution_fields();

  try {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    $params = array(
      'invoice_id' => $order->order_id . '_dc',
    );

    $result = civicrm_api3('Contribution', 'get', $params);
    if (!empty($result['values'])) {
      $contribution = reset($result['values']);
      $existing_id = $contribution['id'];
    }

    // If the order is no longer in the database, it's been deleted
    // and the Contribution should be deleted as well.
    $current = commerce_order_load($order->order_id);
    if (empty($current) && !empty($contribution)) {
      $params = array('id' => $existing_id);
      $contribution = civicrm_api3('Contribution', 'delete', $params);
      unset($existing_id);
      return TRUE;
    }

    // TODO: how to handle multiple transactions on one order?
    $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
    $transaction = array_pop($transactions);
    if (empty($transaction)) {
      $txn_id = time() . '_' . rand(1000, 9999);
    }
    else {
      $txn_id = $transaction->transaction_id;
    }

    $total = $order_wrapper->commerce_order_total->amount->value();
    $order_total = $total / 100;

    $tax_field_id = variable_get('commerce_civicrm_tax_field_id', '');
    $shipping_field_id = variable_get('commerce_civicrm_shipping_field_id', '');
    $tax_total = 0;
    $shipping_total = 0;

    // Get the tax total.
    if (module_exists('commerce_tax')) {
      $components = $order_wrapper->commerce_order_total->data->value();
      $tax_total = commerce_tax_total_amount($components['components'], TRUE, commerce_default_currency()) / 100;
    }

    // TODO: figure out where to get the shipping total from.
    if (!empty($order->payment_method)) {
      $payment_instrument_id = _commerce_civicrm_map_payment_instrument($order->payment_method);
    }
    else {
      $payment_instrument_id = _commerce_civicrm_map_payment_instrument('credit');
    }

    $notes = _commerce_civicrm_create_detail_string($order_wrapper);

    civicrm_initialize();
    $params = array(
      'contact_id' => $cid,
      'receive_date' => date('Ymd'),
      'total_amount' => $order_total,
      'financial_type_id' => variable_get('commerce_civicrm_contribution_type', ''), // @FIXME this needs a sensible default
      'payment_instrument_id' => $payment_instrument_id,
      'non_deductible_amount' => 00.00,
      'fee_amount' => 00.00,
      'net_amount' => $order_total,
      'trxn_id' => $txn_id,
      'invoice_id' => $order->order_id . '_dc',
      'source' => $notes,
      'contribution_status_id' => _commerce_civicrm_map_contribution_status($order->status),
      'note' => $notes,
    );

    if (!empty($tax_field_id)) {
      $params['custom_' . $tax_field_id] = $tax_total;
    }
    if (!empty($shipping_field_id)) {
      $params['custom_' . $shipping_field_id] = $shipping_total;
    }

    // If we have an existing ID, we'll update that contribution.
    if (isset($existing_id)) {
      $params['id'] = $existing_id;
    }

    // Allow other modules to alter the contribution data before being sent to CiviCRM.
    foreach (module_implements('commerce_civicrm_contribution_params') as $module) {
      $function = $module . '_commerce_civicrm_contribution_params';
      $function($params, $order, $cid);
    }

    //dpm($params, 'Contribution create');
    civicrm_api3('Contribution', 'create', $params);
  }
  catch (Exception $e) {
    drupal_set_message(t('CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine())), 'error');
    watchdog('commerce_civicrm', 'CiviCRM API error in %file @ %line: %message', array('%message' => $e->getMessage(), '%file' => $e->getFile(), '%line' => $e->getLine()), WATCHDOG_ERROR);
    dpm($e->getTrace(), 'trace');
  }

  return TRUE;
}

/**
 * Maps a Drupal Commerce payment method to a CiviCRM payment instrument.
 *
 * @param string $payment_method
 *    A Drupal Commerce payment method
 * @return int
 *    The CiviCRM id of the payment processor
 */
function _commerce_civicrm_map_payment_instrument($payment_method) {
  // TODO: not sure where to get this info, defaulting everything to 'credit'.
  $payment_method = 'credit';

  $map = array(
    'credit' => 1,
    'cod'    => 3,
    'check'  => 4,
  );

  if (array_key_exists($payment_method, $map)) {
    $id = $map[$payment_method];
  }
  else {
    $id = 1;
  }

  return $id;
}

/**
 * Maps a Drupal Commerce order status to a corresponding CiviCRM contribution status.
 *
 * @param string $order_status
 *    A Drupal Commerce order status
 * @return int
 *    A CiviCRM order status
 */
function _commerce_civicrm_map_contribution_status($order_status) {
  // NOTE: There may be a more 'correct' way to do this.
  $map = array(
    'completed'         => 1,
    'payment_received'  => 1,
    'pending'           => 2,
    'canceled'          => 3,
    'cart'              => 5,
    'checkout_checkout' => 5,
    'checkout_review'   => 5,
  );

  if (array_key_exists($order_status, $map)) {
    $id = $map[$order_status];
  }
  // No status mapping found.
  else {
    $id = 1;
    watchdog('commerce_civicrm', 'There is no status that maps to %status marking as "Complete"', array('%status' => $order_status), WATCHDOG_WARNING);
  }

  return $id;
}

/**
 * Create string to insert for purchase activity details.
 */
function _commerce_civicrm_create_detail_string($order_wrapper) {
  $str = '';
  $titles = array();

  // Populate the array of the quantities of the products on the order.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      // Extract a product ID and quantity from the line item.
      $line_item_sku = $line_item_wrapper->commerce_product->sku->value();
      $quantity = $line_item_wrapper->quantity->value();
      $title = $line_item_wrapper->commerce_product->title->value();

      // Update the product's quantity value.
      if (empty($products[$line_item_sku])) {
        $products[$line_item_sku] = $quantity;
        $titles[$title] = $quantity;
      }
      else {
        $products[$line_item_sku] += $quantity;
        $titles[$title] += $quantity;
      }
    }
  }

  // Display the product titles and the number purchased.
  if (!empty($titles)) {
    $strings = array();
    foreach ($titles as $title => $quantity) {
      $strings[] = $title . ' x ' . $quantity;
    }
    $str = implode(', ', $strings);
  }

  return $str;
}

/**
 * Count number of orders made by a customer.
 *
 * @param $customer
 *   The user object for the customer.
 */
function _commerce_civicrm_count_customer_orders($customer) {
  $count = db_select('commerce_order')
    ->fields('commerce_order', array('order_id'))
    ->condition('uid', $customer->uid)
    ->countQuery()
    ->execute()
    ->fetchField();
  return $count;
}
